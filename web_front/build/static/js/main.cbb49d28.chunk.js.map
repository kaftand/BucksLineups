{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","players","isClicked","figPath","firstName","lastName","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","playerPics","map","value","i","react_default","a","createElement","alt","key","src","style","border","console","log","className","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uKCIlCC,eACN,CACE,CAACC,WAAU,EAAOC,QAAQ,gBAAiBC,UAAU,OAAQC,SAAS,WACtE,CAACH,WAAU,EAAOC,QAAQ,gBAAiBC,UAAU,UAAWC,SAAS,iBACzE,CAACH,WAAU,EAAOC,QAAQ,gBAAiBC,UAAU,UAAWC,SAAS,WACzE,CAACH,WAAU,EAAOC,QAAQ,gBAAiBC,UAAU,WAAYC,SAAS,SAC1E,CAACH,WAAU,EAAOC,QAAQ,gBAAiBC,UAAU,SAAUC,SAAS,UACxE,CAACH,WAAU,EAAOC,QAAQ,gBAAiBC,UAAU,SAAUC,SAAS,UACxE,CAACH,WAAU,EAAOC,QAAQ,gBAAiBC,UAAU,MAAOC,SAAS,eACrE,CAACH,WAAU,EAAOC,QAAQ,gBAAiBC,UAAU,UAAWC,SAAS,eACzE,CAACH,WAAU,EAAOC,QAAQ,gBAAiBC,UAAU,QAASC,SAAS,cACvE,CAACH,WAAU,EAAOC,QAAQ,gBAAiBC,UAAU,SAAUC,SAAS,SACxE,CAACH,WAAU,EAAOC,QAAQ,gBAAiBC,UAAU,MAAOC,SAAS,WACrE,CAACH,WAAU,EAAOC,QAAQ,gBAAiBC,UAAU,MAAOC,SAAS,SACrE,CAACH,WAAU,EAAOC,QAAQ,gBAAiBC,UAAU,OAAQC,SAAS,UACtE,CAACH,WAAU,EAAOC,QAAQ,eAAgBC,UAAU,SAAUC,SAAS,QACvE,CAACH,WAAU,EAAOC,QAAQ,gBAAiBC,UAAU,QAASC,SAAS,YACvE,CAACH,WAAU,EAAOC,QAAQ,gBAAiBC,UAAU,QAASC,SAAS,SACvE,CAACH,WAAU,EAAOC,QAAQ,gBAAiBC,UAAU,OAAQC,SAAS,SACtE,CAACH,WAAU,EAAOC,QAAQ,gBAAiBC,UAAU,QAASC,SAAS,aACvE,CAACH,WAAU,EAAOC,QAAQ,gBAAiBC,UAAU,SAAUC,SAAS,WACxE,CAACH,WAAU,EAAOC,QAAQ,gBAAiBC,UAAU,SAAUC,SAAS,UACxE,CAACH,WAAU,EAAOC,QAAQ,gBAAiBC,UAAU,QAASC,SAAS,SACvE,CAACH,WAAU,EAAOC,QAAQ,gBAAiBC,UAAU,OAAQC,SAAS,SACtE,CAACH,WAAU,EAAOC,QAAQ,gBAAiBC,UAAU,KAAMC,SAAS,UACpE,CAACH,WAAU,EAAOC,QAAQ,eAAgBC,UAAU,YAAaC,SAAS,UAyB7DC,cAtBb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAACd,QAAQA,GAFLO,wEAKjB,IAAMQ,EACJL,KAAKI,MAAMd,QAAQgB,IACjB,SAACC,EAAOC,GAAR,OACEC,EAAAC,EAAAC,cAAA,OACEC,IAAKL,EAAMd,UAAY,IAAMc,EAAMb,SACnCmB,IAAKL,EACLM,IAAK,iBAAkBP,EAAMf,QAASuB,MAAO,CAACC,OAAO,uBAG7D,OADAC,QAAQC,IAAIb,GAEVI,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACZd,UAjBSe,IAAMC,WCnBJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cbb49d28.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst players = \n[\n  {isClicked:false, figPath:\"bledser01.jpg\", firstName:\"Eric\", lastName:\"Bledsoe\" },\n  {isClicked:false, figPath:\"antetgi01.jpg\", firstName:\"Giannis\", lastName:\"Antetokounmpo\"},\n  {isClicked:false, figPath:\"brogdma01.jpg\", firstName:\"Malcolm\", lastName:\"Brogdan\" },\n  {isClicked:false, figPath:\"brownst02.jpg\", firstName:\"Sterling\", lastName:\"Brown\" },\n  {isClicked:false, figPath:\"canaais01.jpg\", firstName:\"Isaiah\", lastName:\"Canaan\" },\n  {isClicked:false, figPath:\"colsobo01.jpg\", firstName:\"Bonzie\", lastName:\"Colson\" },\n  {isClicked:false, figPath:\"connapa01.jpg\", firstName:\"Pat\", lastName:\"Connaughton\" },\n  {isClicked:false, figPath:\"dellama01.jpg\", firstName:\"Matthew\", lastName:\"Dellavedova\" },\n  {isClicked:false, figPath:\"divindo01.jpg\", firstName:\"Donte\", lastName:\"DiVincenzo\" },\n  {isClicked:false, figPath:\"duvaltr01.jpg\", firstName:\"Trevon\", lastName:\"Duval\" },\n  {isClicked:false, figPath:\"fraziti01.jpg\", firstName:\"Tim\", lastName:\"Frazier\" },\n  {isClicked:false, figPath:\"gasolpa01.jpg\", firstName:\"Pau\", lastName:\"Gasol\" },\n  {isClicked:false, figPath:\"hensojo01.jpg\", firstName:\"John\", lastName:\"Henson\" },\n  {isClicked:false, figPath:\"hillge01.jpg\", firstName:\"George\", lastName:\"Hill\" },\n  {isClicked:false, figPath:\"ilyaser01.jpg\", firstName:\"Ersan\", lastName:\"Ilyasova\" },\n  {isClicked:false, figPath:\"lopezbr01.jpg\", firstName:\"Brook\", lastName:\"Lopez\" },\n  {isClicked:false, figPath:\"makerth01.jpg\", firstName:\"Thon\", lastName:\"Maker\" },                                                         \n  {isClicked:false, figPath:\"middlkh01.jpg\", firstName:\"Khris\", lastName:\"Middleton\" },\n  {isClicked:false, figPath:\"mirotni01.jpg\", firstName:\"Nikola\", lastName:\"Mirotic\" },\n  {isClicked:false, figPath:\"morrija01.jpg\", firstName:\"Jaylen\", lastName:\"Morris\" },\n  {isClicked:false, figPath:\"smithja02.jpg\", firstName:\"Jason\", lastName:\"Smith\" },\n  {isClicked:false, figPath:\"snellto01.jpg\", firstName:\"Tony\", lastName:\"Snell\" },\n  {isClicked:false, figPath:\"wilsodj01.jpg\", firstName:\"DJ\", lastName:\"Wilson\" },\n  {isClicked:false, figPath:\"woodch01.jpg\", firstName:\"Christian\", lastName:\"Wood\" }]\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {players:players}\n  }\n  render() {\n    const playerPics = \n      this.state.players.map(\n        (value, i ) => \n          <img \n            alt={value.firstName + \" \" + value.lastName} \n            key={i} \n            src={\"./BucksPhotos/\"+ value.figPath} style={{border:\"5px solid black\"}} />\n      )\n    console.log(playerPics)\n    return (\n      <div className=\"App\">\n        {playerPics}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}